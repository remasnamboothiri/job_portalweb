# Generated by Django 5.2.1 on 2025-10-22 05:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_recruiter', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('company', models.CharField(max_length=200)),
                ('location', models.CharField(max_length=200)),
                ('description', models.TextField(max_length=20000)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='job_images/')),
                ('department', models.CharField(choices=[('engineering', 'Engineering'), ('marketing', 'Marketing'), ('sales', 'Sales'), ('hr', 'Human Resources'), ('finance', 'Finance'), ('operations', 'Operations'), ('design', 'Design'), ('product', 'Product'), ('customer_support', 'Customer Support'), ('other', 'Other')], default='other', max_length=50)),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('internship', 'Internship'), ('freelance', 'Freelance')], default='full_time', max_length=20)),
                ('experience_level', models.CharField(choices=[('entry', 'Entry Level'), ('mid', 'Mid Level'), ('senior', 'Senior Level'), ('lead', 'Lead/Manager'), ('executive', 'Executive')], default='mid', max_length=20)),
                ('salary_min', models.IntegerField(default=50000, help_text='Minimum salary in your currency')),
                ('salary_max', models.IntegerField(default=80000, help_text='Maximum salary in your currency')),
                ('required_skills', models.TextField(default='Not specified', help_text='Comma separated skills', max_length=500)),
                ('status', models.CharField(choices=[('active', 'Active'), ('closed', 'Closed'), ('expired', 'Expired'), ('filled', 'Position Filled')], default='active', max_length=20)),
                ('enable_ai_interview', models.BooleanField(default=False)),
                ('interview_duration', models.CharField(blank=True, choices=[('5', '5 minutes'), ('10', '10 minutes'), ('15', '15 minutes'), ('20', '20 minutes'), ('30', '30 minutes')], default='15', max_length=20, null=True)),
                ('interview_question_count', models.IntegerField(blank=True, choices=[(5, '5 questions'), (8, '8 questions'), (10, '10 questions'), (12, '12 questions'), (15, '15 questions')], default=8, null=True)),
                ('date_posted', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('posted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('candidate_name', models.CharField(default='Unknown Candidate', max_length=255)),
                ('candidate_email', models.EmailField(default='unknown@example.com', max_length=254)),
                ('candidate_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('interview_id', models.CharField(blank=True, max_length=11, unique=True)),
                ('link', models.URLField(blank=True, max_length=500)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='scheduled', max_length=20)),
                ('transcript', models.TextField(blank=True, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('recording_data', models.TextField(blank=True, help_text='JSON data for recording information', null=True)),
                ('recording_path', models.CharField(blank=True, help_text='Path to the recorded interview file', max_length=500, null=True)),
                ('recording_duration', models.FloatField(blank=True, help_text='Duration of recording in seconds', null=True)),
                ('is_recorded', models.BooleanField(default=False, help_text='Whether this interview was recorded')),
                ('questions_asked', models.TextField(blank=True, help_text='JSON data of questions asked during interview', null=True)),
                ('answers_given', models.TextField(blank=True, help_text='JSON data of candidate answers', null=True)),
                ('overall_score', models.FloatField(blank=True, help_text='Overall interview score out of 10', null=True)),
                ('technical_score', models.FloatField(blank=True, help_text='Technical skills score out of 10', null=True)),
                ('communication_score', models.FloatField(blank=True, help_text='Communication skills score out of 10', null=True)),
                ('problem_solving_score', models.FloatField(blank=True, help_text='Problem solving score out of 10', null=True)),
                ('ai_feedback', models.TextField(blank=True, help_text='AI-generated feedback about the candidate', null=True)),
                ('recommendation', models.CharField(blank=True, choices=[('highly_recommended', 'Highly Recommended'), ('recommended', 'Recommended'), ('maybe', 'Maybe'), ('not_recommended', 'Not Recommended')], help_text='AI recommendation for hiring', max_length=20, null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the interview was completed', null=True)),
                ('results_generated_at', models.DateTimeField(blank=True, help_text='When AI results were generated', null=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When the interview session actually started', null=True)),
                ('interview_duration_minutes', models.IntegerField(choices=[(5, '5 minutes'), (10, '10 minutes'), (15, '15 minutes'), (20, '20 minutes'), (30, '30 minutes')], default=15, help_text='Duration set by recruiter for this specific interview')),
                ('candidate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobapp.job')),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume', models.FileField(help_text='Upload your resume in PDF, DOC, or DOCX format (max 5MB)', upload_to='applications/resumes/')),
                ('status', models.CharField(choices=[('active', 'Active'), ('closed', 'Closed'), ('expired', 'Expired'), ('filled', 'Position Filled')], default='Pending', max_length=20)),
                ('applied_at', models.DateTimeField(auto_now_add=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobapp.job')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('skills', models.CharField(blank=True, help_text='Separate skills with commas', max_length=300)),
                ('resume', models.FileField(blank=True, null=True, upload_to='resumes/')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('resume', models.FileField(blank=True, null=True, upload_to='candidate_resumes/')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('email', 'added_by')},
            },
        ),
    ]
